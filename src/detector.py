#!/usr/bin/env python3
"""
YOLO Object Detector with Basler Camera
–ê–≤—Ç–æ—Ä: [–í–∞—à–µ –∏–º—è]
"""

import json
import time
import logging
from loguru import logger
import os
import sys

class YOLODetector:
    def __init__(self, model_path, conf_threshold=0.5, headless=False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        
        Args:
            model_path: –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ YOLO (.pt —Ñ–∞–π–ª)
            conf_threshold: –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
            headless: —Ä–µ–∂–∏–º –±–µ–∑ GUI
        """
        self.model_path = model_path
        self.conf_threshold = conf_threshold
        self.headless = headless
        self.model = None
        self.camera = None
        self.converter = None
        self.frame_count = 0
        self.start_time = time.time()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        self.load_model()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
        camera_initialized = self.setup_camera()
        
        if not camera_initialized:
            logger.error("‚ùå Camera initialization failed completely")
        elif self.camera is None:
            logger.info("üì∑ Running in simulation mode (no camera available)")
        else:
            logger.info("üì∑ Camera initialized successfully")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π
        logger.remove()
        logger.add(
            "detector.log",
            rotation="10 MB",
            retention="10 days",
            level="INFO",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}"
        )
        logger.add(
            sys.stdout,
            level="INFO",
            format="<green>{time:HH:mm:ss}</green> | <level>{level}</level> | {message}"
        )
        logger.info("üöÄ YOLO Detector initialized")
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PyTorch 2.6+"""
        try:
            from ultralytics import YOLO
            import torch
            import torch.serialization
            
            logger.info(f"üîÑ Loading model: {self.model_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(self.model_path):
                logger.error(f"‚ùå Model file not found: {self.model_path}")
                raise FileNotFoundError(f"Model file not found: {self.model_path}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª–∞–º–∏ –¥–ª—è PyTorch 2.6+
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≥–ª–æ–±–∞–ª—ã
                from ultralytics.nn.tasks import DetectionModel
                torch.serialization.add_safe_globals([DetectionModel])
                
                self.model = YOLO(self.model_path)
                logger.info("‚úÖ Model loaded successfully with safe_globals")
                
            except Exception as e1:
                logger.warning(f"‚ö†Ô∏è Safe globals method failed: {e1}")
                
                # Fallback: –æ—Ç–∫–ª—é—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                try:
                    import os
                    os.environ['TORCH_LOAD_DISABLE_SAFE_GLOBALS'] = '1'
                    self.model = YOLO(self.model_path)
                    logger.info("‚úÖ Model loaded with disabled safe globals")
                    
                except Exception as e2:
                    logger.error(f"‚ùå All loading methods failed: {e2}")
                    
                    # –§–∏–Ω–∞–ª—å–Ω—ã–π fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
                    logger.info("üîÑ Falling back to official YOLOv8 model")
                    self.model = YOLO('yolov8n.pt')
                    logger.info("‚úÖ Official YOLOv8 model loaded")
            
            logger.info(f"üìä Model info: {len(self.model.names)} classes")
            logger.info(f"üìã Classes: {list(self.model.names.values())}")
            
        except Exception as e:
            logger.error(f"‚ùå Model loading failed: {e}")
            raise
    
    def setup_camera(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã Basler —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            from pypylon import pylon
            
            logger.info("üîÑ Initializing camera...")
            
            # –ò—â–µ–º –∫–∞–º–µ—Ä—ã
            tl_factory = pylon.TlFactory.GetInstance()
            devices = tl_factory.EnumerateDevices()
            
            if len(devices) == 0:
                logger.error("‚ùå No Basler cameras found")
                logger.info("üîÑ Running in simulation mode (no camera)")
                self.camera = None
                return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏
            
            logger.info(f"‚úÖ Found {len(devices)} camera(s):")
            for i, device in enumerate(devices):
                logger.info(f"  {i+1}. {device.GetModelName()} (SN: {device.GetSerialNumber()})")
            
            # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
            self.camera = pylon.InstantCamera(tl_factory.CreateDevice(devices[0]))
            self.camera.Open()
            
            logger.info(f"üì∑ Connected to: {self.camera.GetDeviceInfo().GetModelName()}")
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
            try:
                # –í—ã–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ä–µ–∂–∏–º—ã
                self.camera.ExposureAuto.SetValue("Off")
                self.camera.GainAuto.SetValue("Off")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                self.camera.ExposureTimeRaw.SetValue(30000)  # 30ms
                self.camera.GainRaw.SetValue(250)
                
                logger.info("‚úÖ Camera settings applied")
                
            except Exception as config_error:
                logger.warning(f"‚ö†Ô∏è Some camera settings failed: {config_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
            self.converter = pylon.ImageFormatConverter()
            self.converter.OutputPixelFormat = pylon.PixelType_BGR8packed
            self.converter.OutputBitAlignment = pylon.OutputBitAlignment_MsbAligned
            
            # –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞
            self.camera.StartGrabbing(pylon.GrabStrategy_LatestImageOnly)
            logger.info("‚úÖ Camera setup completed and grabbing started")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Camera setup failed: {e}")
            logger.info("üîÑ Continuing in simulation mode")
            self.camera = None
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏
    
    def capture_frame(self):
        """–ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã –∏–ª–∏ —Å–∏–º—É–ª—è—Ü–∏—è"""
        if self.camera is None:
            logger.debug("üì∑ Camera is None - using simulation mode")
            return self._get_test_image()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
            if not self.camera.IsGrabbing():
                logger.warning("üîÑ Camera was not grabbing, restarting...")
                self.camera.StartGrabbing(pylon.GrabStrategy_LatestImageOnly)
                time.sleep(0.1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            
            grab_result = self.camera.RetrieveResult(5000, pylon.TimeoutHandling_ThrowException)
            
            if grab_result.GrabSucceeded():
                image = self.converter.Convert(grab_result)
                frame = image.GetArray()
                grab_result.Release()
                self.frame_count += 1
                return frame
            else:
                logger.warning("‚ùå Frame grab failed")
                grab_result.Release()
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error capturing frame: {e}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É
            try:
                logger.info("üîÑ Attempting to restart camera...")
                if self.camera.IsGrabbing():
                    self.camera.StopGrabbing()
                self.camera.StartGrabbing(pylon.GrabStrategy_LatestImageOnly)
            except Exception as restart_error:
                logger.error(f"‚ùå Failed to restart camera: {restart_error}")
            
            return None
    
    def _get_test_image(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏"""
        import numpy as np
        import cv2
        import random
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 640x480
        height, width = 480, 640
        test_image = np.random.randint(50, 150, (height, width, 3), dtype=np.uint8)
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–æ–±—ä–µ–∫—Ç—ã" - —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
        num_objects = random.randint(1, 5)
        for i in range(num_objects):
            x1 = random.randint(50, width - 100)
            y1 = random.randint(50, height - 100)
            x2 = x1 + random.randint(50, 150)
            y2 = y1 + random.randint(50, 150)
            
            color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
            cv2.rectangle(test_image, (x1, y1), (x2, y2), color, 2)
            
            # –ü–æ–¥–ø–∏—Å—å –æ–±—ä–µ–∫—Ç–∞
            cv2.putText(test_image, f"Object_{i}", (x1, y1-10), 
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ
        cv2.putText(test_image, "SIMULATION MODE - NO CAMERA", (50, 30), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.putText(test_image, f"Objects: {num_objects}", (50, 60), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
        cv2.putText(test_image, f"Frame: {self.frame_count}", (50, 90), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
        
        self.frame_count += 1
        return test_image
    
    def detect(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞ –æ–¥–Ω–æ–º –∫–∞–¥—Ä–µ"""
        # –ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–∞
        frame = self.capture_frame()
        
        if frame is None:
            return {
                "error": "Failed to capture frame",
                "timestamp": time.strftime('%Y-%m-%d %H:%M:%S'),
                "objects_detected": 0,
                "objects": [],
                "camera_status": "error"
            }
        
        # –î–µ—Ç–µ–∫—Ü–∏—è
        start_time = time.time()
        try:
            results = self.model(frame, verbose=False)
            inference_time = (time.time() - start_time) * 1000
            
            detection_data = self.process_results(results, inference_time)
            
        except Exception as e:
            logger.error(f"‚ùå Detection failed: {e}")
            detection_data = {
                "error": f"Detection failed: {e}",
                "timestamp": time.strftime('%Y-%m-%d %H:%M:%S'),
                "objects_detected": 0,
                "objects": [],
                "inference_time_ms": 0
            }
            inference_time = 0
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        import psutil
        detection_data.update({
            "cpu_usage": psutil.cpu_percent(),
            "ram_usage": psutil.virtual_memory().percent,
            "camera_status": "active" if self.camera else "simulation",
            "frame_count": self.frame_count,
            "uptime_seconds": round(time.time() - self.start_time, 2)
        })
        
        if "error" not in detection_data:
            logger.info(f"‚úÖ Detection: {detection_data['objects_detected']} objects, {detection_data['inference_time_ms']:.1f}ms")
        else:
            logger.warning(f"‚ö†Ô∏è Detection with error: {detection_data['error']}")
        
        return detection_data
    
    def process_results(self, results, inference_time):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏ YOLO"""
        detection_data = {
            "timestamp": time.strftime('%Y-%m-%d %H:%M:%S'),
            "inference_time_ms": round(inference_time, 2),
            "objects_detected": 0,
            "objects": []
        }
        
        for result in results:
            if result.boxes is not None and len(result.boxes) > 0:
                boxes = result.boxes
                detection_data["objects_detected"] = len(boxes)
                
                for i, box in enumerate(boxes):
                    conf = box.conf[0].cpu().numpy()
                    if conf >= self.conf_threshold:
                        x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
                        cls = int(box.cls[0].cpu().numpy())
                        
                        object_info = {
                            "id": i,
                            "class_id": cls,
                            "class_name": self.model.names[cls],
                            "confidence": float(conf),
                            "bbox": {
                                "x1": float(x1),
                                "y1": float(y1),
                                "x2": float(x2),
                                "y2": float(y2)
                            }
                        }
                        detection_data["objects"].append(object_info)
        
        return detection_data
    
    def save_detection_result(self, detection_data, output_dir="detections"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ JSON —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(output_dir, exist_ok=True)
            
            # –ò–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = time.strftime('%Y%m%d_%H%M%S')
            filename = f"{output_dir}/detection_{timestamp}_{self.frame_count:06d}.json"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(detection_data, f, indent=2, ensure_ascii=False)
            
            logger.debug(f"üíæ Results saved to: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå Failed to save results: {e}")
            return None
    
    def get_camera_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–º–µ—Ä—ã"""
        if self.camera is None:
            return "simulation"
        elif self.camera.IsGrabbing():
            return "active"
        else:
            return "inactive"
    
    def print_status(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        status = self.get_camera_status()
        fps = self.frame_count / (time.time() - self.start_time) if (time.time() - self.start_time) > 0 else 0
        
        logger.info("üìä System Status:")
        logger.info(f"  - Camera: {status}")
        logger.info(f"  - Model: {'loaded' if self.model else 'not loaded'}")
        logger.info(f"  - Frames processed: {self.frame_count}")
        logger.info(f"  - FPS: {fps:.1f}")
        logger.info(f"  - Uptime: {time.time() - self.start_time:.1f}s")
        logger.info(f"  - Mode: {'headless' if self.headless else 'GUI'}")
    
    def run(self, save_results=False, output_dir="detections", interval=2.0):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–µ—Ç–µ–∫—Ü–∏–∏
        
        Args:
            save_results: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã
            output_dir: –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            interval: –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        logger.info("üöÄ Starting detection loop...")
        logger.info(f"üìÅ Results will be saved to: {output_dir}" if save_results else "üìÅ Results will not be saved")
        logger.info(f"‚è±Ô∏è  Detection interval: {interval}s")
        
        self.print_status()
        
        try:
            while True:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
                result = self.detect()
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
                print(json.dumps(result, indent=2))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if save_results and "error" not in result:
                    self.save_detection_result(result, output_dir)
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –∫–∞–¥—Ä–æ–≤
                if self.frame_count % 10 == 0:
                    self.print_status()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏
                time.sleep(interval)
                
        except KeyboardInterrupt:
            logger.info("üõë Detection stopped by user")
        except Exception as e:
            logger.error(f"üí• Unexpected error in detection loop: {e}")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ Cleaning up resources...")
        
        try:
            if self.camera is not None:
                if self.camera.IsGrabbing():
                    self.camera.StopGrabbing()
                self.camera.Close()
                logger.info("‚úÖ Camera resources released")
            else:
                logger.info("‚úÖ Simulation mode - no camera to cleanup")
        except Exception as e:
            logger.error(f"‚ùå Error during camera cleanup: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - self.start_time
        fps = self.frame_count / total_time if total_time > 0 else 0
        
        logger.info("üìà Final Statistics:")
        logger.info(f"  - Total frames: {self.frame_count}")
        logger.info(f"  - Total time: {total_time:.1f}s")
        logger.info(f"  - Average FPS: {fps:.1f}")
        logger.info(f"  - Camera status: {self.get_camera_status()}")
        
        logger.info("‚úÖ All resources cleaned up")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    detector = YOLODetector(
        model_path="models/best.pt",
        conf_threshold=0.5,
        headless=True
    )
    
    try:
        detector.run(save_results=True, interval=2.0)
    except KeyboardInterrupt:
        print("Stopped by user")
    finally:
        detector.cleanup()